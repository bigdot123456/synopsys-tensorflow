// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MWNN.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MWNN_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MWNN_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MWNN_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MWNN_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MWNN_2eproto;
namespace MWNN {
class MWNNAttributeProto;
class MWNNAttributeProtoDefaultTypeInternal;
extern MWNNAttributeProtoDefaultTypeInternal _MWNNAttributeProto_default_instance_;
class MWNNGraphProto;
class MWNNGraphProtoDefaultTypeInternal;
extern MWNNGraphProtoDefaultTypeInternal _MWNNGraphProto_default_instance_;
class MWNNNodeProto;
class MWNNNodeProtoDefaultTypeInternal;
extern MWNNNodeProtoDefaultTypeInternal _MWNNNodeProto_default_instance_;
class MWNNTensorProto;
class MWNNTensorProtoDefaultTypeInternal;
extern MWNNTensorProtoDefaultTypeInternal _MWNNTensorProto_default_instance_;
}  // namespace MWNN
PROTOBUF_NAMESPACE_OPEN
template<> ::MWNN::MWNNAttributeProto* Arena::CreateMaybeMessage<::MWNN::MWNNAttributeProto>(Arena*);
template<> ::MWNN::MWNNGraphProto* Arena::CreateMaybeMessage<::MWNN::MWNNGraphProto>(Arena*);
template<> ::MWNN::MWNNNodeProto* Arena::CreateMaybeMessage<::MWNN::MWNNNodeProto>(Arena*);
template<> ::MWNN::MWNNTensorProto* Arena::CreateMaybeMessage<::MWNN::MWNNTensorProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MWNN {

// ===================================================================

class MWNNTensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MWNN.MWNNTensorProto) */ {
 public:
  MWNNTensorProto();
  virtual ~MWNNTensorProto();

  MWNNTensorProto(const MWNNTensorProto& from);
  MWNNTensorProto(MWNNTensorProto&& from) noexcept
    : MWNNTensorProto() {
    *this = ::std::move(from);
  }

  inline MWNNTensorProto& operator=(const MWNNTensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MWNNTensorProto& operator=(MWNNTensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MWNNTensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MWNNTensorProto* internal_default_instance() {
    return reinterpret_cast<const MWNNTensorProto*>(
               &_MWNNTensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MWNNTensorProto& a, MWNNTensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MWNNTensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MWNNTensorProto* New() const final {
    return CreateMaybeMessage<MWNNTensorProto>(nullptr);
  }

  MWNNTensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MWNNTensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MWNNTensorProto& from);
  void MergeFrom(const MWNNTensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MWNNTensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MWNN.MWNNTensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MWNN_2eproto);
    return ::descriptor_table_MWNN_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kFloatDataFieldNumber = 4,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dims();

  // repeated float float_data = 4 [packed = true];
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MWNN.MWNNTensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dims_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  mutable std::atomic<int> _float_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_MWNN_2eproto;
};
// -------------------------------------------------------------------

class MWNNAttributeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MWNN.MWNNAttributeProto) */ {
 public:
  MWNNAttributeProto();
  virtual ~MWNNAttributeProto();

  MWNNAttributeProto(const MWNNAttributeProto& from);
  MWNNAttributeProto(MWNNAttributeProto&& from) noexcept
    : MWNNAttributeProto() {
    *this = ::std::move(from);
  }

  inline MWNNAttributeProto& operator=(const MWNNAttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MWNNAttributeProto& operator=(MWNNAttributeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MWNNAttributeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MWNNAttributeProto* internal_default_instance() {
    return reinterpret_cast<const MWNNAttributeProto*>(
               &_MWNNAttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MWNNAttributeProto& a, MWNNAttributeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MWNNAttributeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MWNNAttributeProto* New() const final {
    return CreateMaybeMessage<MWNNAttributeProto>(nullptr);
  }

  MWNNAttributeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MWNNAttributeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MWNNAttributeProto& from);
  void MergeFrom(const MWNNAttributeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MWNNAttributeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MWNN.MWNNAttributeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MWNN_2eproto);
    return ::descriptor_table_MWNN_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntDataFieldNumber = 3,
    kFloatDataFieldNumber = 4,
    kStringDataFieldNumber = 5,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 int_data = 3;
  int int_data_size() const;
  private:
  int _internal_int_data_size() const;
  public:
  void clear_int_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int_data() const;
  void _internal_add_int_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int_data(int index) const;
  void set_int_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_data();

  // repeated float float_data = 4;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // repeated string string_data = 5;
  int string_data_size() const;
  private:
  int _internal_string_data_size() const;
  public:
  void clear_string_data();
  const std::string& string_data(int index) const;
  std::string* mutable_string_data(int index);
  void set_string_data(int index, const std::string& value);
  void set_string_data(int index, std::string&& value);
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const char* value, size_t size);
  std::string* add_string_data();
  void add_string_data(const std::string& value);
  void add_string_data(std::string&& value);
  void add_string_data(const char* value);
  void add_string_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_data();
  private:
  const std::string& _internal_string_data(int index) const;
  std::string* _internal_add_string_data();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MWNN.MWNNAttributeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_MWNN_2eproto;
};
// -------------------------------------------------------------------

class MWNNNodeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MWNN.MWNNNodeProto) */ {
 public:
  MWNNNodeProto();
  virtual ~MWNNNodeProto();

  MWNNNodeProto(const MWNNNodeProto& from);
  MWNNNodeProto(MWNNNodeProto&& from) noexcept
    : MWNNNodeProto() {
    *this = ::std::move(from);
  }

  inline MWNNNodeProto& operator=(const MWNNNodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MWNNNodeProto& operator=(MWNNNodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MWNNNodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MWNNNodeProto* internal_default_instance() {
    return reinterpret_cast<const MWNNNodeProto*>(
               &_MWNNNodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MWNNNodeProto& a, MWNNNodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MWNNNodeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MWNNNodeProto* New() const final {
    return CreateMaybeMessage<MWNNNodeProto>(nullptr);
  }

  MWNNNodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MWNNNodeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MWNNNodeProto& from);
  void MergeFrom(const MWNNNodeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MWNNNodeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MWNN.MWNNNodeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MWNN_2eproto);
    return ::descriptor_table_MWNN_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpNameFieldNumber = 3,
    kOpNameFieldNumber = 4,
    kAttributeFieldNumber = 5,
    kNameFieldNumber = 1,
    kOpTypeFieldNumber = 2,
  };
  // repeated string ip_name = 3;
  int ip_name_size() const;
  private:
  int _internal_ip_name_size() const;
  public:
  void clear_ip_name();
  const std::string& ip_name(int index) const;
  std::string* mutable_ip_name(int index);
  void set_ip_name(int index, const std::string& value);
  void set_ip_name(int index, std::string&& value);
  void set_ip_name(int index, const char* value);
  void set_ip_name(int index, const char* value, size_t size);
  std::string* add_ip_name();
  void add_ip_name(const std::string& value);
  void add_ip_name(std::string&& value);
  void add_ip_name(const char* value);
  void add_ip_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_name();
  private:
  const std::string& _internal_ip_name(int index) const;
  std::string* _internal_add_ip_name();
  public:

  // repeated string op_name = 4;
  int op_name_size() const;
  private:
  int _internal_op_name_size() const;
  public:
  void clear_op_name();
  const std::string& op_name(int index) const;
  std::string* mutable_op_name(int index);
  void set_op_name(int index, const std::string& value);
  void set_op_name(int index, std::string&& value);
  void set_op_name(int index, const char* value);
  void set_op_name(int index, const char* value, size_t size);
  std::string* add_op_name();
  void add_op_name(const std::string& value);
  void add_op_name(std::string&& value);
  void add_op_name(const char* value);
  void add_op_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& op_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_op_name();
  private:
  const std::string& _internal_op_name(int index) const;
  std::string* _internal_add_op_name();
  public:

  // repeated .MWNN.MWNNAttributeProto attribute = 5;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::MWNN::MWNNAttributeProto* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNAttributeProto >*
      mutable_attribute();
  private:
  const ::MWNN::MWNNAttributeProto& _internal_attribute(int index) const;
  ::MWNN::MWNNAttributeProto* _internal_add_attribute();
  public:
  const ::MWNN::MWNNAttributeProto& attribute(int index) const;
  ::MWNN::MWNNAttributeProto* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNAttributeProto >&
      attribute() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string op_type = 2;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // @@protoc_insertion_point(class_scope:MWNN.MWNNNodeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> op_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNAttributeProto > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  friend struct ::TableStruct_MWNN_2eproto;
};
// -------------------------------------------------------------------

class MWNNGraphProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MWNN.MWNNGraphProto) */ {
 public:
  MWNNGraphProto();
  virtual ~MWNNGraphProto();

  MWNNGraphProto(const MWNNGraphProto& from);
  MWNNGraphProto(MWNNGraphProto&& from) noexcept
    : MWNNGraphProto() {
    *this = ::std::move(from);
  }

  inline MWNNGraphProto& operator=(const MWNNGraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MWNNGraphProto& operator=(MWNNGraphProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MWNNGraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MWNNGraphProto* internal_default_instance() {
    return reinterpret_cast<const MWNNGraphProto*>(
               &_MWNNGraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MWNNGraphProto& a, MWNNGraphProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MWNNGraphProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MWNNGraphProto* New() const final {
    return CreateMaybeMessage<MWNNGraphProto>(nullptr);
  }

  MWNNGraphProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MWNNGraphProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MWNNGraphProto& from);
  void MergeFrom(const MWNNGraphProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MWNNGraphProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MWNN.MWNNGraphProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MWNN_2eproto);
    return ::descriptor_table_MWNN_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpNameFieldNumber = 2,
    kOpNameFieldNumber = 3,
    kNodeFieldNumber = 4,
    kInitializerFieldNumber = 5,
    kInputFieldNumber = 6,
    kOutputFieldNumber = 7,
    kNameFieldNumber = 1,
  };
  // repeated string ip_name = 2;
  int ip_name_size() const;
  private:
  int _internal_ip_name_size() const;
  public:
  void clear_ip_name();
  const std::string& ip_name(int index) const;
  std::string* mutable_ip_name(int index);
  void set_ip_name(int index, const std::string& value);
  void set_ip_name(int index, std::string&& value);
  void set_ip_name(int index, const char* value);
  void set_ip_name(int index, const char* value, size_t size);
  std::string* add_ip_name();
  void add_ip_name(const std::string& value);
  void add_ip_name(std::string&& value);
  void add_ip_name(const char* value);
  void add_ip_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_name();
  private:
  const std::string& _internal_ip_name(int index) const;
  std::string* _internal_add_ip_name();
  public:

  // repeated string op_name = 3;
  int op_name_size() const;
  private:
  int _internal_op_name_size() const;
  public:
  void clear_op_name();
  const std::string& op_name(int index) const;
  std::string* mutable_op_name(int index);
  void set_op_name(int index, const std::string& value);
  void set_op_name(int index, std::string&& value);
  void set_op_name(int index, const char* value);
  void set_op_name(int index, const char* value, size_t size);
  std::string* add_op_name();
  void add_op_name(const std::string& value);
  void add_op_name(std::string&& value);
  void add_op_name(const char* value);
  void add_op_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& op_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_op_name();
  private:
  const std::string& _internal_op_name(int index) const;
  std::string* _internal_add_op_name();
  public:

  // repeated .MWNN.MWNNNodeProto node = 4;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::MWNN::MWNNNodeProto* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNNodeProto >*
      mutable_node();
  private:
  const ::MWNN::MWNNNodeProto& _internal_node(int index) const;
  ::MWNN::MWNNNodeProto* _internal_add_node();
  public:
  const ::MWNN::MWNNNodeProto& node(int index) const;
  ::MWNN::MWNNNodeProto* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNNodeProto >&
      node() const;

  // repeated .MWNN.MWNNTensorProto initializer = 5;
  int initializer_size() const;
  private:
  int _internal_initializer_size() const;
  public:
  void clear_initializer();
  ::MWNN::MWNNTensorProto* mutable_initializer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
      mutable_initializer();
  private:
  const ::MWNN::MWNNTensorProto& _internal_initializer(int index) const;
  ::MWNN::MWNNTensorProto* _internal_add_initializer();
  public:
  const ::MWNN::MWNNTensorProto& initializer(int index) const;
  ::MWNN::MWNNTensorProto* add_initializer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
      initializer() const;

  // repeated .MWNN.MWNNTensorProto input = 6;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::MWNN::MWNNTensorProto* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
      mutable_input();
  private:
  const ::MWNN::MWNNTensorProto& _internal_input(int index) const;
  ::MWNN::MWNNTensorProto* _internal_add_input();
  public:
  const ::MWNN::MWNNTensorProto& input(int index) const;
  ::MWNN::MWNNTensorProto* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
      input() const;

  // repeated .MWNN.MWNNTensorProto output = 7;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::MWNN::MWNNTensorProto* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
      mutable_output();
  private:
  const ::MWNN::MWNNTensorProto& _internal_output(int index) const;
  ::MWNN::MWNNTensorProto* _internal_add_output();
  public:
  const ::MWNN::MWNNTensorProto& output(int index) const;
  ::MWNN::MWNNTensorProto* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
      output() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:MWNN.MWNNGraphProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> op_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNNodeProto > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto > initializer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto > output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_MWNN_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MWNNTensorProto

// optional string name = 1;
inline bool MWNNTensorProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MWNNTensorProto::has_name() const {
  return _internal_has_name();
}
inline void MWNNTensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MWNNTensorProto::name() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNTensorProto.name)
  return _internal_name();
}
inline void MWNNTensorProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNTensorProto.name)
}
inline std::string* MWNNTensorProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNTensorProto.name)
  return _internal_mutable_name();
}
inline const std::string& MWNNTensorProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void MWNNTensorProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MWNNTensorProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MWNN.MWNNTensorProto.name)
}
inline void MWNNTensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNTensorProto.name)
}
inline void MWNNTensorProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNTensorProto.name)
}
inline std::string* MWNNTensorProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MWNNTensorProto::release_name() {
  // @@protoc_insertion_point(field_release:MWNN.MWNNTensorProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MWNNTensorProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MWNN.MWNNTensorProto.name)
}

// optional int32 type = 2;
inline bool MWNNTensorProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MWNNTensorProto::has_type() const {
  return _internal_has_type();
}
inline void MWNNTensorProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNTensorProto::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNTensorProto::type() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNTensorProto.type)
  return _internal_type();
}
inline void MWNNTensorProto::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void MWNNTensorProto::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNTensorProto.type)
}

// repeated int32 dims = 3;
inline int MWNNTensorProto::_internal_dims_size() const {
  return dims_.size();
}
inline int MWNNTensorProto::dims_size() const {
  return _internal_dims_size();
}
inline void MWNNTensorProto::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNTensorProto::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNTensorProto.dims)
  return _internal_dims(index);
}
inline void MWNNTensorProto::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNTensorProto.dims)
}
inline void MWNNTensorProto::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dims_.Add(value);
}
inline void MWNNTensorProto::add_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNTensorProto.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MWNNTensorProto::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MWNNTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNTensorProto.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MWNNTensorProto::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MWNNTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNTensorProto.dims)
  return _internal_mutable_dims();
}

// repeated float float_data = 4 [packed = true];
inline int MWNNTensorProto::_internal_float_data_size() const {
  return float_data_.size();
}
inline int MWNNTensorProto::float_data_size() const {
  return _internal_float_data_size();
}
inline void MWNNTensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float MWNNTensorProto::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float MWNNTensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNTensorProto.float_data)
  return _internal_float_data(index);
}
inline void MWNNTensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNTensorProto.float_data)
}
inline void MWNNTensorProto::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void MWNNTensorProto::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNTensorProto.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MWNNTensorProto::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MWNNTensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNTensorProto.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MWNNTensorProto::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MWNNTensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNTensorProto.float_data)
  return _internal_mutable_float_data();
}

// -------------------------------------------------------------------

// MWNNAttributeProto

// optional string name = 1;
inline bool MWNNAttributeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MWNNAttributeProto::has_name() const {
  return _internal_has_name();
}
inline void MWNNAttributeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MWNNAttributeProto::name() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNAttributeProto.name)
  return _internal_name();
}
inline void MWNNAttributeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.name)
}
inline std::string* MWNNAttributeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNAttributeProto.name)
  return _internal_mutable_name();
}
inline const std::string& MWNNAttributeProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void MWNNAttributeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MWNNAttributeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MWNN.MWNNAttributeProto.name)
}
inline void MWNNAttributeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNAttributeProto.name)
}
inline void MWNNAttributeProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNAttributeProto.name)
}
inline std::string* MWNNAttributeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MWNNAttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:MWNN.MWNNAttributeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MWNNAttributeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MWNN.MWNNAttributeProto.name)
}

// optional int32 type = 2;
inline bool MWNNAttributeProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MWNNAttributeProto::has_type() const {
  return _internal_has_type();
}
inline void MWNNAttributeProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNAttributeProto::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNAttributeProto::type() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNAttributeProto.type)
  return _internal_type();
}
inline void MWNNAttributeProto::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void MWNNAttributeProto::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.type)
}

// repeated int32 int_data = 3;
inline int MWNNAttributeProto::_internal_int_data_size() const {
  return int_data_.size();
}
inline int MWNNAttributeProto::int_data_size() const {
  return _internal_int_data_size();
}
inline void MWNNAttributeProto::clear_int_data() {
  int_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNAttributeProto::_internal_int_data(int index) const {
  return int_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MWNNAttributeProto::int_data(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNAttributeProto.int_data)
  return _internal_int_data(index);
}
inline void MWNNAttributeProto::set_int_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.int_data)
}
inline void MWNNAttributeProto::_internal_add_int_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_data_.Add(value);
}
inline void MWNNAttributeProto::add_int_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int_data(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNAttributeProto.int_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MWNNAttributeProto::_internal_int_data() const {
  return int_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MWNNAttributeProto::int_data() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNAttributeProto.int_data)
  return _internal_int_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MWNNAttributeProto::_internal_mutable_int_data() {
  return &int_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MWNNAttributeProto::mutable_int_data() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNAttributeProto.int_data)
  return _internal_mutable_int_data();
}

// repeated float float_data = 4;
inline int MWNNAttributeProto::_internal_float_data_size() const {
  return float_data_.size();
}
inline int MWNNAttributeProto::float_data_size() const {
  return _internal_float_data_size();
}
inline void MWNNAttributeProto::clear_float_data() {
  float_data_.Clear();
}
inline float MWNNAttributeProto::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float MWNNAttributeProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNAttributeProto.float_data)
  return _internal_float_data(index);
}
inline void MWNNAttributeProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.float_data)
}
inline void MWNNAttributeProto::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void MWNNAttributeProto::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNAttributeProto.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MWNNAttributeProto::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MWNNAttributeProto::float_data() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNAttributeProto.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MWNNAttributeProto::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MWNNAttributeProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNAttributeProto.float_data)
  return _internal_mutable_float_data();
}

// repeated string string_data = 5;
inline int MWNNAttributeProto::_internal_string_data_size() const {
  return string_data_.size();
}
inline int MWNNAttributeProto::string_data_size() const {
  return _internal_string_data_size();
}
inline void MWNNAttributeProto::clear_string_data() {
  string_data_.Clear();
}
inline std::string* MWNNAttributeProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:MWNN.MWNNAttributeProto.string_data)
  return _internal_add_string_data();
}
inline const std::string& MWNNAttributeProto::_internal_string_data(int index) const {
  return string_data_.Get(index);
}
inline const std::string& MWNNAttributeProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNAttributeProto.string_data)
  return _internal_string_data(index);
}
inline std::string* MWNNAttributeProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNAttributeProto.string_data)
  return string_data_.Mutable(index);
}
inline void MWNNAttributeProto::set_string_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
inline void MWNNAttributeProto::set_string_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNAttributeProto.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
inline void MWNNAttributeProto::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNAttributeProto.string_data)
}
inline void MWNNAttributeProto::set_string_data(int index, const char* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNAttributeProto.string_data)
}
inline std::string* MWNNAttributeProto::_internal_add_string_data() {
  return string_data_.Add();
}
inline void MWNNAttributeProto::add_string_data(const std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNAttributeProto.string_data)
}
inline void MWNNAttributeProto::add_string_data(std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MWNN.MWNNAttributeProto.string_data)
}
inline void MWNNAttributeProto::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MWNN.MWNNAttributeProto.string_data)
}
inline void MWNNAttributeProto::add_string_data(const char* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MWNN.MWNNAttributeProto.string_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MWNNAttributeProto::string_data() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNAttributeProto.string_data)
  return string_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MWNNAttributeProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNAttributeProto.string_data)
  return &string_data_;
}

// -------------------------------------------------------------------

// MWNNNodeProto

// optional string name = 1;
inline bool MWNNNodeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MWNNNodeProto::has_name() const {
  return _internal_has_name();
}
inline void MWNNNodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MWNNNodeProto::name() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNNodeProto.name)
  return _internal_name();
}
inline void MWNNNodeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.name)
}
inline std::string* MWNNNodeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNNodeProto.name)
  return _internal_mutable_name();
}
inline const std::string& MWNNNodeProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void MWNNNodeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MWNNNodeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MWNN.MWNNNodeProto.name)
}
inline void MWNNNodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNNodeProto.name)
}
inline void MWNNNodeProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNNodeProto.name)
}
inline std::string* MWNNNodeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MWNNNodeProto::release_name() {
  // @@protoc_insertion_point(field_release:MWNN.MWNNNodeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MWNNNodeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MWNN.MWNNNodeProto.name)
}

// optional string op_type = 2;
inline bool MWNNNodeProto::_internal_has_op_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MWNNNodeProto::has_op_type() const {
  return _internal_has_op_type();
}
inline void MWNNNodeProto::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MWNNNodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNNodeProto.op_type)
  return _internal_op_type();
}
inline void MWNNNodeProto::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.op_type)
}
inline std::string* MWNNNodeProto::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNNodeProto.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& MWNNNodeProto::_internal_op_type() const {
  return op_type_.GetNoArena();
}
inline void MWNNNodeProto::_internal_set_op_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MWNNNodeProto::set_op_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MWNN.MWNNNodeProto.op_type)
}
inline void MWNNNodeProto::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNNodeProto.op_type)
}
inline void MWNNNodeProto::set_op_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNNodeProto.op_type)
}
inline std::string* MWNNNodeProto::_internal_mutable_op_type() {
  _has_bits_[0] |= 0x00000002u;
  return op_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MWNNNodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:MWNN.MWNNNodeProto.op_type)
  if (!_internal_has_op_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return op_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MWNNNodeProto::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  op_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:MWNN.MWNNNodeProto.op_type)
}

// repeated string ip_name = 3;
inline int MWNNNodeProto::_internal_ip_name_size() const {
  return ip_name_.size();
}
inline int MWNNNodeProto::ip_name_size() const {
  return _internal_ip_name_size();
}
inline void MWNNNodeProto::clear_ip_name() {
  ip_name_.Clear();
}
inline std::string* MWNNNodeProto::add_ip_name() {
  // @@protoc_insertion_point(field_add_mutable:MWNN.MWNNNodeProto.ip_name)
  return _internal_add_ip_name();
}
inline const std::string& MWNNNodeProto::_internal_ip_name(int index) const {
  return ip_name_.Get(index);
}
inline const std::string& MWNNNodeProto::ip_name(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNNodeProto.ip_name)
  return _internal_ip_name(index);
}
inline std::string* MWNNNodeProto::mutable_ip_name(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNNodeProto.ip_name)
  return ip_name_.Mutable(index);
}
inline void MWNNNodeProto::set_ip_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.ip_name)
  ip_name_.Mutable(index)->assign(value);
}
inline void MWNNNodeProto::set_ip_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.ip_name)
  ip_name_.Mutable(index)->assign(std::move(value));
}
inline void MWNNNodeProto::set_ip_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNNodeProto.ip_name)
}
inline void MWNNNodeProto::set_ip_name(int index, const char* value, size_t size) {
  ip_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNNodeProto.ip_name)
}
inline std::string* MWNNNodeProto::_internal_add_ip_name() {
  return ip_name_.Add();
}
inline void MWNNNodeProto::add_ip_name(const std::string& value) {
  ip_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNNodeProto.ip_name)
}
inline void MWNNNodeProto::add_ip_name(std::string&& value) {
  ip_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MWNN.MWNNNodeProto.ip_name)
}
inline void MWNNNodeProto::add_ip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MWNN.MWNNNodeProto.ip_name)
}
inline void MWNNNodeProto::add_ip_name(const char* value, size_t size) {
  ip_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MWNN.MWNNNodeProto.ip_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MWNNNodeProto::ip_name() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNNodeProto.ip_name)
  return ip_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MWNNNodeProto::mutable_ip_name() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNNodeProto.ip_name)
  return &ip_name_;
}

// repeated string op_name = 4;
inline int MWNNNodeProto::_internal_op_name_size() const {
  return op_name_.size();
}
inline int MWNNNodeProto::op_name_size() const {
  return _internal_op_name_size();
}
inline void MWNNNodeProto::clear_op_name() {
  op_name_.Clear();
}
inline std::string* MWNNNodeProto::add_op_name() {
  // @@protoc_insertion_point(field_add_mutable:MWNN.MWNNNodeProto.op_name)
  return _internal_add_op_name();
}
inline const std::string& MWNNNodeProto::_internal_op_name(int index) const {
  return op_name_.Get(index);
}
inline const std::string& MWNNNodeProto::op_name(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNNodeProto.op_name)
  return _internal_op_name(index);
}
inline std::string* MWNNNodeProto::mutable_op_name(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNNodeProto.op_name)
  return op_name_.Mutable(index);
}
inline void MWNNNodeProto::set_op_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.op_name)
  op_name_.Mutable(index)->assign(value);
}
inline void MWNNNodeProto::set_op_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNNodeProto.op_name)
  op_name_.Mutable(index)->assign(std::move(value));
}
inline void MWNNNodeProto::set_op_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNNodeProto.op_name)
}
inline void MWNNNodeProto::set_op_name(int index, const char* value, size_t size) {
  op_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNNodeProto.op_name)
}
inline std::string* MWNNNodeProto::_internal_add_op_name() {
  return op_name_.Add();
}
inline void MWNNNodeProto::add_op_name(const std::string& value) {
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNNodeProto.op_name)
}
inline void MWNNNodeProto::add_op_name(std::string&& value) {
  op_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MWNN.MWNNNodeProto.op_name)
}
inline void MWNNNodeProto::add_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MWNN.MWNNNodeProto.op_name)
}
inline void MWNNNodeProto::add_op_name(const char* value, size_t size) {
  op_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MWNN.MWNNNodeProto.op_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MWNNNodeProto::op_name() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNNodeProto.op_name)
  return op_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MWNNNodeProto::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNNodeProto.op_name)
  return &op_name_;
}

// repeated .MWNN.MWNNAttributeProto attribute = 5;
inline int MWNNNodeProto::_internal_attribute_size() const {
  return attribute_.size();
}
inline int MWNNNodeProto::attribute_size() const {
  return _internal_attribute_size();
}
inline void MWNNNodeProto::clear_attribute() {
  attribute_.Clear();
}
inline ::MWNN::MWNNAttributeProto* MWNNNodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNNodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNAttributeProto >*
MWNNNodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNNodeProto.attribute)
  return &attribute_;
}
inline const ::MWNN::MWNNAttributeProto& MWNNNodeProto::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::MWNN::MWNNAttributeProto& MWNNNodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNNodeProto.attribute)
  return _internal_attribute(index);
}
inline ::MWNN::MWNNAttributeProto* MWNNNodeProto::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::MWNN::MWNNAttributeProto* MWNNNodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:MWNN.MWNNNodeProto.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNAttributeProto >&
MWNNNodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNNodeProto.attribute)
  return attribute_;
}

// -------------------------------------------------------------------

// MWNNGraphProto

// optional string name = 1;
inline bool MWNNGraphProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MWNNGraphProto::has_name() const {
  return _internal_has_name();
}
inline void MWNNGraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MWNNGraphProto::name() const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.name)
  return _internal_name();
}
inline void MWNNGraphProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MWNN.MWNNGraphProto.name)
}
inline std::string* MWNNGraphProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.name)
  return _internal_mutable_name();
}
inline const std::string& MWNNGraphProto::_internal_name() const {
  return name_.GetNoArena();
}
inline void MWNNGraphProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MWNNGraphProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MWNN.MWNNGraphProto.name)
}
inline void MWNNGraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNGraphProto.name)
}
inline void MWNNGraphProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNGraphProto.name)
}
inline std::string* MWNNGraphProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MWNNGraphProto::release_name() {
  // @@protoc_insertion_point(field_release:MWNN.MWNNGraphProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MWNNGraphProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MWNN.MWNNGraphProto.name)
}

// repeated string ip_name = 2;
inline int MWNNGraphProto::_internal_ip_name_size() const {
  return ip_name_.size();
}
inline int MWNNGraphProto::ip_name_size() const {
  return _internal_ip_name_size();
}
inline void MWNNGraphProto::clear_ip_name() {
  ip_name_.Clear();
}
inline std::string* MWNNGraphProto::add_ip_name() {
  // @@protoc_insertion_point(field_add_mutable:MWNN.MWNNGraphProto.ip_name)
  return _internal_add_ip_name();
}
inline const std::string& MWNNGraphProto::_internal_ip_name(int index) const {
  return ip_name_.Get(index);
}
inline const std::string& MWNNGraphProto::ip_name(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.ip_name)
  return _internal_ip_name(index);
}
inline std::string* MWNNGraphProto::mutable_ip_name(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.ip_name)
  return ip_name_.Mutable(index);
}
inline void MWNNGraphProto::set_ip_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNGraphProto.ip_name)
  ip_name_.Mutable(index)->assign(value);
}
inline void MWNNGraphProto::set_ip_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNGraphProto.ip_name)
  ip_name_.Mutable(index)->assign(std::move(value));
}
inline void MWNNGraphProto::set_ip_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNGraphProto.ip_name)
}
inline void MWNNGraphProto::set_ip_name(int index, const char* value, size_t size) {
  ip_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNGraphProto.ip_name)
}
inline std::string* MWNNGraphProto::_internal_add_ip_name() {
  return ip_name_.Add();
}
inline void MWNNGraphProto::add_ip_name(const std::string& value) {
  ip_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.ip_name)
}
inline void MWNNGraphProto::add_ip_name(std::string&& value) {
  ip_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.ip_name)
}
inline void MWNNGraphProto::add_ip_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MWNN.MWNNGraphProto.ip_name)
}
inline void MWNNGraphProto::add_ip_name(const char* value, size_t size) {
  ip_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MWNN.MWNNGraphProto.ip_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MWNNGraphProto::ip_name() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.ip_name)
  return ip_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MWNNGraphProto::mutable_ip_name() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.ip_name)
  return &ip_name_;
}

// repeated string op_name = 3;
inline int MWNNGraphProto::_internal_op_name_size() const {
  return op_name_.size();
}
inline int MWNNGraphProto::op_name_size() const {
  return _internal_op_name_size();
}
inline void MWNNGraphProto::clear_op_name() {
  op_name_.Clear();
}
inline std::string* MWNNGraphProto::add_op_name() {
  // @@protoc_insertion_point(field_add_mutable:MWNN.MWNNGraphProto.op_name)
  return _internal_add_op_name();
}
inline const std::string& MWNNGraphProto::_internal_op_name(int index) const {
  return op_name_.Get(index);
}
inline const std::string& MWNNGraphProto::op_name(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.op_name)
  return _internal_op_name(index);
}
inline std::string* MWNNGraphProto::mutable_op_name(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.op_name)
  return op_name_.Mutable(index);
}
inline void MWNNGraphProto::set_op_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNGraphProto.op_name)
  op_name_.Mutable(index)->assign(value);
}
inline void MWNNGraphProto::set_op_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MWNN.MWNNGraphProto.op_name)
  op_name_.Mutable(index)->assign(std::move(value));
}
inline void MWNNGraphProto::set_op_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MWNN.MWNNGraphProto.op_name)
}
inline void MWNNGraphProto::set_op_name(int index, const char* value, size_t size) {
  op_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MWNN.MWNNGraphProto.op_name)
}
inline std::string* MWNNGraphProto::_internal_add_op_name() {
  return op_name_.Add();
}
inline void MWNNGraphProto::add_op_name(const std::string& value) {
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.op_name)
}
inline void MWNNGraphProto::add_op_name(std::string&& value) {
  op_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.op_name)
}
inline void MWNNGraphProto::add_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MWNN.MWNNGraphProto.op_name)
}
inline void MWNNGraphProto::add_op_name(const char* value, size_t size) {
  op_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MWNN.MWNNGraphProto.op_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MWNNGraphProto::op_name() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.op_name)
  return op_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MWNNGraphProto::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.op_name)
  return &op_name_;
}

// repeated .MWNN.MWNNNodeProto node = 4;
inline int MWNNGraphProto::_internal_node_size() const {
  return node_.size();
}
inline int MWNNGraphProto::node_size() const {
  return _internal_node_size();
}
inline void MWNNGraphProto::clear_node() {
  node_.Clear();
}
inline ::MWNN::MWNNNodeProto* MWNNGraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNNodeProto >*
MWNNGraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.node)
  return &node_;
}
inline const ::MWNN::MWNNNodeProto& MWNNGraphProto::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::MWNN::MWNNNodeProto& MWNNGraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.node)
  return _internal_node(index);
}
inline ::MWNN::MWNNNodeProto* MWNNGraphProto::_internal_add_node() {
  return node_.Add();
}
inline ::MWNN::MWNNNodeProto* MWNNGraphProto::add_node() {
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNNodeProto >&
MWNNGraphProto::node() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.node)
  return node_;
}

// repeated .MWNN.MWNNTensorProto initializer = 5;
inline int MWNNGraphProto::_internal_initializer_size() const {
  return initializer_.size();
}
inline int MWNNGraphProto::initializer_size() const {
  return _internal_initializer_size();
}
inline void MWNNGraphProto::clear_initializer() {
  initializer_.Clear();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.initializer)
  return initializer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
MWNNGraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.initializer)
  return &initializer_;
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::_internal_initializer(int index) const {
  return initializer_.Get(index);
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.initializer)
  return _internal_initializer(index);
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::_internal_add_initializer() {
  return initializer_.Add();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.initializer)
  return _internal_add_initializer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
MWNNGraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.initializer)
  return initializer_;
}

// repeated .MWNN.MWNNTensorProto input = 6;
inline int MWNNGraphProto::_internal_input_size() const {
  return input_.size();
}
inline int MWNNGraphProto::input_size() const {
  return _internal_input_size();
}
inline void MWNNGraphProto::clear_input() {
  input_.Clear();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
MWNNGraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.input)
  return &input_;
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.input)
  return _internal_input(index);
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::_internal_add_input() {
  return input_.Add();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::add_input() {
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
MWNNGraphProto::input() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.input)
  return input_;
}

// repeated .MWNN.MWNNTensorProto output = 7;
inline int MWNNGraphProto::_internal_output_size() const {
  return output_.size();
}
inline int MWNNGraphProto::output_size() const {
  return _internal_output_size();
}
inline void MWNNGraphProto::clear_output() {
  output_.Clear();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:MWNN.MWNNGraphProto.output)
  return output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >*
MWNNGraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:MWNN.MWNNGraphProto.output)
  return &output_;
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::_internal_output(int index) const {
  return output_.Get(index);
}
inline const ::MWNN::MWNNTensorProto& MWNNGraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:MWNN.MWNNGraphProto.output)
  return _internal_output(index);
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::_internal_add_output() {
  return output_.Add();
}
inline ::MWNN::MWNNTensorProto* MWNNGraphProto::add_output() {
  // @@protoc_insertion_point(field_add:MWNN.MWNNGraphProto.output)
  return _internal_add_output();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MWNN::MWNNTensorProto >&
MWNNGraphProto::output() const {
  // @@protoc_insertion_point(field_list:MWNN.MWNNGraphProto.output)
  return output_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MWNN

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MWNN_2eproto
