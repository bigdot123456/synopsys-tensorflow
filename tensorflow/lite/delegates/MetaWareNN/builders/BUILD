package(
    default_visibility = [
        "//visibility:public",
    ],
    licenses = ["notice"],  # Apache 2.0
)

cc_import(
  name = "mwnn_protobuf",
  hdrs = ["metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.h"],
  shared_library = "metawarenn_lib/lib/libprotobuf.so",
)

cc_binary(
    name="model_builder",
    deps=[":mwnn_protobuf",
          ":model_builder_lib"],
    visibility=["//visibility:public"],
    linkshared = 1,
)

cc_library(
    name = "model_builder_lib",
    srcs = [
        "model_builder.cc",
        "metawarenn_lib/metawarenn_graph.cc",
        "metawarenn_lib/metawarenn_tensor.cc",
        "metawarenn_lib/metawarenn_node.cc",
        "metawarenn_lib/metawarenn_attribute.cc",
        "metawarenn_lib/metawarenn_utils.cc",
        "metawarenn_lib/kernels/helpers/mli_helpers.cc",
        "metawarenn_lib/op/abs.cc",
        "metawarenn_lib/op/add.cc",
        "metawarenn_lib/op/and.cc",
        "metawarenn_lib/op/argmax.cc",
        "metawarenn_lib/op/argmin.cc",
        "metawarenn_lib/op/avg_pool.cc",
        "metawarenn_lib/op/batch_normalization.cc",
        "metawarenn_lib/op/cast.cc",
        "metawarenn_lib/op/ceil.cc",
        "metawarenn_lib/op/clip.cc",
        "metawarenn_lib/op/concat.cc",
        "metawarenn_lib/op/constant_of_shape.cc",
        "metawarenn_lib/op/conv.cc",
        "metawarenn_lib/op/conv_transpose.cc",
        "metawarenn_lib/op/dequantize_linear.cc",
        "metawarenn_lib/op/div.cc",
        "metawarenn_lib/op/dropout.cc",
        "metawarenn_lib/op/einsum.cc",
        "metawarenn_lib/op/elu.cc",
        "metawarenn_lib/op/equal.cc",
        "metawarenn_lib/op/exp.cc",
        "metawarenn_lib/op/expand.cc",
        "metawarenn_lib/op/flatten.cc",
        "metawarenn_lib/op/floor.cc",
        "metawarenn_lib/op/gather.cc",
        "metawarenn_lib/op/gemm.cc",
        "metawarenn_lib/op/global_avg_pool.cc",
        "metawarenn_lib/op/greater.cc",
        "metawarenn_lib/op/hard_swish.cc",
        "metawarenn_lib/op/identity.cc",
        "metawarenn_lib/op/instance_normalization.cc",
        "metawarenn_lib/op/leaky_relu.cc",
        "metawarenn_lib/op/less.cc",
        "metawarenn_lib/op/log.cc",
        "metawarenn_lib/op/lrn.cc",
        "metawarenn_lib/op/matmul.cc",
        "metawarenn_lib/op/max.cc",
        "metawarenn_lib/op/max_pool.cc",
        "metawarenn_lib/op/mean.cc",
        "metawarenn_lib/op/min.cc",
        "metawarenn_lib/op/mul.cc",
        "metawarenn_lib/op/node.cc",
        "metawarenn_lib/op/non_max_suppression.cc",
        "metawarenn_lib/op/non_zero.cc",
        "metawarenn_lib/op/not.cc",
        "metawarenn_lib/op/pad.cc",
        "metawarenn_lib/op/pow.cc",
        "metawarenn_lib/op/prelu.cc",
        "metawarenn_lib/op/quantize_linear.cc",
        "metawarenn_lib/op/reducel2.cc",
        "metawarenn_lib/op/reduce_max.cc",
        "metawarenn_lib/op/reduce_mean.cc",
        "metawarenn_lib/op/reduce_min.cc",
        "metawarenn_lib/op/reduce_sum.cc",
        "metawarenn_lib/op/relu.cc",
        "metawarenn_lib/op/reshape.cc",
        "metawarenn_lib/op/resize.cc",
        "metawarenn_lib/op/roi_align.cc",
        "metawarenn_lib/op/round.cc",
        "metawarenn_lib/op/scatter.cc",
        "metawarenn_lib/op/scatter_nd.cc",
        "metawarenn_lib/op/shape.cc",
        "metawarenn_lib/op/sigmoid.cc",
        "metawarenn_lib/op/slice.cc",
        "metawarenn_lib/op/softmax.cc",
        "metawarenn_lib/op/softplus.cc",
        "metawarenn_lib/op/space_to_depth.cc",
        "metawarenn_lib/op/split.cc",
        "metawarenn_lib/op/sqrt.cc",
        "metawarenn_lib/op/squeeze.cc",
        "metawarenn_lib/op/sub.cc",
        "metawarenn_lib/op/sum.cc",
        "metawarenn_lib/op/tanh.cc",
        "metawarenn_lib/op/tile.cc",
        "metawarenn_lib/op/topk.cc",
        "metawarenn_lib/op/transpose.cc",
        "metawarenn_lib/op/unsqueeze.cc",
        "metawarenn_lib/op/upsample.cc",
        "metawarenn_lib/op/where.cc",
        "metawarenn_lib/optimizer/calculate_offset.cc",
        "metawarenn_lib/optimizer/expand_dimension.cc",
        "metawarenn_lib/optimizer/metawarenn_optimizer.cc",
        "metawarenn_lib/optimizer/remove_reshape.cc",
        "metawarenn_lib/optimizer/fuse_relu.cc",
        "metawarenn_lib/optimizer/fuse_batchnorm.cc",
        "metawarenn_lib/optimizer/convert_layout.cc",
        "metawarenn_lib/optimizer/remove_transpose.cc",
        "metawarenn_lib/optimizer/pass_manager.cc",
        "metawarenn_lib/mwnnconvert/mwnn_to_onnx_proto.cc",
        "metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.cc",
        "metawarenn_lib/mwnnconvert/onnx_protobuf/onnx-ml.pb.cc",
        "metawarenn_lib/executable_network/metawarenn_executable_graph.cc",
        "metawarenn_lib/executable_network/metawarenn_serialization.cc",
        "metawarenn_lib/inference_engine/mwnn_execution_context.cc",
        "metawarenn_lib/inference_engine/mwnn_inference_engine.cc",
        "metawarenn_lib/inference_engine/mwnn_device_memory.cc",
        "metawarenn_lib/inference_engine/mwnn_builder.cc",
        "metawarenn_lib/inference_engine/mwnn_optimization_profile.cc",
        "metawarenn_lib/inference_engine/mwnn_encrypt_decrypt.cc",
    ],
    hdrs = [
        "model_builder.h",
        "metawarenn_lib/metawarenn_graph.h",
        "metawarenn_lib/metawarenn_tensor.h",
        "metawarenn_lib/metawarenn_node.h",
        "metawarenn_lib/metawarenn_attribute.h",
        "metawarenn_lib/metawarenn_utils.h",
        "metawarenn_lib/metawarenn_element.h",
        "metawarenn_lib/kernels/mli_krn_convolution_ref.h",
        "metawarenn_lib/kernels/mli_krn_avepool_hwc.h",
        "metawarenn_lib/kernels/mli_krn_eltwise_ref.h",
        "metawarenn_lib/kernels/include/mli_types.h",
        "metawarenn_lib/kernels/include/mli_api.h",
        "metawarenn_lib/kernels/include/mli_check.h",
        "metawarenn_lib/kernels/include/mli_config.h",
        "metawarenn_lib/kernels/include/mli_debug.h",
        "metawarenn_lib/kernels/include/mli_krn_convolution_decl.h",
        "metawarenn_lib/kernels/include/mli_krn_convolution.h",
        "metawarenn_lib/kernels/include/mli_krn_dotprod_decl.h",
        "metawarenn_lib/kernels/include/mli_krn_dotprod_ref.h",
        "metawarenn_lib/kernels/include/mli_krn_dotprod.h",
        "metawarenn_lib/kernels/include/mli_krn_eltwise_decl.h",
        "metawarenn_lib/kernels/include/mli_krn_reduce_sum2d_decl.h",
        "metawarenn_lib/kernels/include/mli_krn_reduce_sum2d_ref.h",
        "metawarenn_lib/kernels/include/mli_krn_reduce_sum2d.h",
        "metawarenn_lib/kernels/include/mli_math_macros.h",
        "metawarenn_lib/kernels/include/mli_math.h",
        "metawarenn_lib/kernels/include/mli_private_types.h",
        "metawarenn_lib/kernels/include/mli_prv_dsp.h",
        "metawarenn_lib/kernels/include/mli_prv_layout.h",
        "metawarenn_lib/kernels/include/mli_prv_load_store.h",
        "metawarenn_lib/kernels/include/mli_prv_quant_decl.h",
        "metawarenn_lib/kernels/include/mli_prv_quant_ref.h",
        "metawarenn_lib/kernels/include/mli_prv_quant.h",
        "metawarenn_lib/kernels/include/mli_prv_tensor.h",
        "metawarenn_lib/kernels/include/ref/mli_math.h",
        "metawarenn_lib/kernels/include/api/mli_helpers_api.h",
        "metawarenn_lib/kernels/include/api/mli_kernels_api.h",
        "metawarenn_lib/kernels/include/api/mli_krn_avepool_spec_api.h",
        "metawarenn_lib/kernels/include/api/mli_krn_conv2d_spec_api.h",
        "metawarenn_lib/kernels/include/api/mli_krn_depthwise_conv2d_spec_api.h",
        "metawarenn_lib/kernels/include/api/mli_krn_maxpool_spec_api.h",
        "metawarenn_lib/kernels/include/api/mli_mov_api.h",
        "metawarenn_lib/op/abs.h",
        "metawarenn_lib/op/add.h",
        "metawarenn_lib/op/and.h",
        "metawarenn_lib/op/argmax.h",
        "metawarenn_lib/op/argmin.h",
        "metawarenn_lib/op/avg_pool.h",
        "metawarenn_lib/op/batch_normalization.h",
        "metawarenn_lib/op/cast.h",
        "metawarenn_lib/op/ceil.h",
        "metawarenn_lib/op/clip.h",
        "metawarenn_lib/op/concat.h",
        "metawarenn_lib/op/constant_of_shape.h",
        "metawarenn_lib/op/conv.h",
        "metawarenn_lib/op/conv_transpose.h",
        "metawarenn_lib/op/dequantize_linear.h",
        "metawarenn_lib/op/div.h",
        "metawarenn_lib/op/dropout.h",
        "metawarenn_lib/op/einsum.h",
        "metawarenn_lib/op/elu.h",
        "metawarenn_lib/op/equal.h",
        "metawarenn_lib/op/exp.h",
        "metawarenn_lib/op/expand.h",
        "metawarenn_lib/op/flatten.h",
        "metawarenn_lib/op/floor.h",
        "metawarenn_lib/op/gather.h",
        "metawarenn_lib/op/gemm.h",
        "metawarenn_lib/op/global_avg_pool.h",
        "metawarenn_lib/op/greater.h",
        "metawarenn_lib/op/hard_swish.h",
        "metawarenn_lib/op/identity.h",
        "metawarenn_lib/op/instance_normalization.h",
        "metawarenn_lib/op/leaky_relu.h",
        "metawarenn_lib/op/less.h",
        "metawarenn_lib/op/log.h",
        "metawarenn_lib/op/lrn.h",
        "metawarenn_lib/op/matmul.h",
        "metawarenn_lib/op/max.h",
        "metawarenn_lib/op/max_pool.h",
        "metawarenn_lib/op/mean.h",
        "metawarenn_lib/op/min.h",
        "metawarenn_lib/op/mul.h",
        "metawarenn_lib/op/node.h",
        "metawarenn_lib/op/non_max_suppression.h",
        "metawarenn_lib/op/non_zero.h",
        "metawarenn_lib/op/not.h",
        "metawarenn_lib/op/pad.h",
        "metawarenn_lib/op/pow.h",
        "metawarenn_lib/op/prelu.h",
        "metawarenn_lib/op/quantize_linear.h",
        "metawarenn_lib/op/reducel2.h",
        "metawarenn_lib/op/reduce_max.h",
        "metawarenn_lib/op/reduce_mean.h",
        "metawarenn_lib/op/reduce_min.h",
        "metawarenn_lib/op/reduce_sum.h",
        "metawarenn_lib/op/relu.h",
        "metawarenn_lib/op/reshape.h",
        "metawarenn_lib/op/resize.h",
        "metawarenn_lib/op/roi_align.h",
        "metawarenn_lib/op/round.h",
        "metawarenn_lib/op/scatter.h",
        "metawarenn_lib/op/scatter_nd.h",
        "metawarenn_lib/op/shape.h",
        "metawarenn_lib/op/sigmoid.h",
        "metawarenn_lib/op/slice.h",
        "metawarenn_lib/op/softmax.h",
        "metawarenn_lib/op/softplus.h",
        "metawarenn_lib/op/space_to_depth.h",
        "metawarenn_lib/op/split.h",
        "metawarenn_lib/op/sqrt.h",
        "metawarenn_lib/op/squeeze.h",
        "metawarenn_lib/op/sub.h",
        "metawarenn_lib/op/sum.h",
        "metawarenn_lib/op/tanh.h",
        "metawarenn_lib/op/tile.h",
        "metawarenn_lib/op/topk.h",
        "metawarenn_lib/op/transpose.h",
        "metawarenn_lib/op/unsqueeze.h",
        "metawarenn_lib/op/upsample.h",
        "metawarenn_lib/op/where.h",
        "metawarenn_lib/optimizer/calculate_offset.h",
        "metawarenn_lib/optimizer/expand_dimension.h",
        "metawarenn_lib/optimizer/metawarenn_optimizer.h",
        "metawarenn_lib/optimizer/remove_reshape.h",
        "metawarenn_lib/optimizer/fuse_relu.h",
        "metawarenn_lib/optimizer/convert_layout.h",
        "metawarenn_lib/optimizer/remove_transpose.h",
        "metawarenn_lib/optimizer/pass_manager.h",
        "metawarenn_lib/optimizer/fuse_batchnorm.h",
        "metawarenn_lib/metawarenn_common.h",
        "metawarenn_lib/mwnnconvert/mwnn_to_onnx_proto.h",
        "metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.h",
        "metawarenn_lib/mwnnconvert/onnx_protobuf/onnx-ml.pb.h",
        "metawarenn_lib/executable_network/metawarenn_executable_graph.h",
        "metawarenn_lib/executable_network/metawarenn_exe_utils.h",
        "metawarenn_lib/executable_network/metawarenn_serialization.h",
        "metawarenn_lib/inference_engine/mwnn_execution_context.h",
        "metawarenn_lib/inference_engine/mwnn_inference_engine.h",
        "metawarenn_lib/inference_engine/mwnn_device_memory.h",
        "metawarenn_lib/inference_engine/mwnn_builder.h",
        "metawarenn_lib/inference_engine/mwnn_optimization_profile.h",
        "metawarenn_lib/inference_engine/mwnn_encrypt_decrypt.h",
    ],
    deps=[
        "//tensorflow/lite/c:common",
        "//tensorflow/lite/schema:schema_fbs",
        "//tensorflow/lite/kernels:builtin_ops",
        ],
    tags = [
        "manual",
        "nobuilder",
    ],
)