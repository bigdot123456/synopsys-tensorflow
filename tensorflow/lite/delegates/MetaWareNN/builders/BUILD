package(
    default_visibility = [
        "//visibility:public",
    ],
    licenses = ["notice"],  # Apache 2.0
)

cc_import(
  name = "mwnn_protobuf",
  hdrs = ["metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.h"],
  shared_library = "metawarenn_lib/lib/libprotobuf.so",
)

cc_binary(
    name="model_builder",
    deps=[":mwnn_protobuf",
          ":model_builder_lib"],
    visibility=["//visibility:public"],
    linkshared = 1,
)

cc_library(
    name = "model_builder_lib",
    srcs = [
        "model_builder.cc",
        "metawarenn_lib/metawarenn_graph.cc",
        "metawarenn_lib/metawarenn_tensor.cc",
        "metawarenn_lib/metawarenn_node.cc",
        "metawarenn_lib/metawarenn_attribute.cc",
        "metawarenn_lib/optimizer/graph_transformer.cc",
        "metawarenn_lib/optimizer/calculate_offset.cc",
        "metawarenn_lib/optimizer/expand_dimension.cc",
        "metawarenn_lib/optimizer/metawarenn_optimizer.cc",
        "metawarenn_lib/optimizer/remove_reshape.cc",
        "metawarenn_lib/optimizer/fuse_relu.cc",
        "metawarenn_lib/optimizer/fuse_batchnorm.cc",
        "metawarenn_lib/optimizer/convert_layout.cc",
        "metawarenn_lib/optimizer/remove_transpose.cc",
        "metawarenn_lib/optimizer/pass_manager.cc",
        "metawarenn_lib/mwnnconvert/mwnn_to_onnx_proto.cc",
        "metawarenn_lib/mwnnconvert/mwnn_to_proto.cc",
        "metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.cc",
        "metawarenn_lib/mwnnconvert/onnx_protobuf/onnx-ml.pb.cc",
        "metawarenn_lib/executable_network/metawarenn_executable_graph.cc",
        "metawarenn_lib/executable_network/metawarenn_serialization.cc",
        "metawarenn_lib/inference_engine/mwnn_execution_context.cc",
        "metawarenn_lib/inference_engine/mwnn_inference_engine.cc",
        "metawarenn_lib/inference_engine/mwnn_device.cc",
        "metawarenn_lib/inference_engine/mwnn_builder.cc",
        "metawarenn_lib/inference_engine/mwnn_optimization_profile.cc",
        "metawarenn_lib/inference_engine/mwnn_encrypt_decrypt.cc",
    ],
    hdrs = [
        "model_builder.h",
        "metawarenn_lib/metawarenn_graph.h",
        "metawarenn_lib/metawarenn_tensor.h",
        "metawarenn_lib/metawarenn_node.h",
        "metawarenn_lib/metawarenn_attribute.h",
        "metawarenn_lib/metawarenn_element.h",
        "metawarenn_lib/optimizer/graph_transformer.h",
        "metawarenn_lib/optimizer/calculate_offset.h",
        "metawarenn_lib/optimizer/expand_dimension.h",
        "metawarenn_lib/optimizer/metawarenn_optimizer.h",
        "metawarenn_lib/optimizer/remove_reshape.h",
        "metawarenn_lib/optimizer/fuse_relu.h",
        "metawarenn_lib/optimizer/convert_layout.h",
        "metawarenn_lib/optimizer/remove_transpose.h",
        "metawarenn_lib/optimizer/pass_manager.h",
        "metawarenn_lib/optimizer/fuse_batchnorm.h",
        "metawarenn_lib/metawarenn_common.h",
        "metawarenn_lib/mwnnconvert/mwnn_to_onnx_proto.h",
        "metawarenn_lib/mwnnconvert/mwnn_to_proto.h",
        "metawarenn_lib/mwnnconvert/mwnn_protobuf/cpp_wrapper/MWNN.pb.h",
        "metawarenn_lib/mwnnconvert/onnx_protobuf/onnx-ml.pb.h",
        "metawarenn_lib/executable_network/metawarenn_executable_graph.h",
        "metawarenn_lib/executable_network/metawarenn_exe_utils.h",
        "metawarenn_lib/executable_network/metawarenn_serialization.h",
        "metawarenn_lib/inference_engine/mwnn_execution_context.h",
        "metawarenn_lib/inference_engine/mwnn_inference_engine.h",
        "metawarenn_lib/inference_engine/mwnn_device.h",
        "metawarenn_lib/inference_engine/mwnn_builder.h",
        "metawarenn_lib/inference_engine/mwnn_optimization_profile.h",
        "metawarenn_lib/inference_engine/mwnn_encrypt_decrypt.h",
        "metawarenn_lib/logger/logger.h",
        "metawarenn_lib/mwnnconvert/json/include/json.hpp",
    ],
    deps=[
        "//tensorflow/lite/c:common",
        "//tensorflow/lite/schema:schema_fbs",
        "//tensorflow/lite/kernels:builtin_ops",
        ],
    tags = [
        "manual",
        "nobuilder",
    ],
)
